--- nsBookmarksFeedHandler.cpp	12 Oct 2004 05:21:52 -0000	1.1.2.14
+++ nsBookmarksFeedHandler.cpp	22 Oct 2004 20:15:20 -0000
@@ -47,16 +47,18 @@
 #include "nsIRDFXMLSource.h"
 #include "nsIRDFXMLParser.h"
 #include "nsRDFCID.h"
 #include "nsISupportsPrimitives.h"
 #include "rdf.h"
 #include "nsUnicharUtils.h"
 #include "nsInt64.h"
 
+#include "nsIScriptSecurityManager.h"
+
 #include "nsIURL.h"
 #include "nsIInputStream.h"
 #include "nsNetUtil.h"
 #include "nsICachingChannel.h"
 #include "nsICacheVisitor.h"
 
 #include "nsIDOMParser.h"
 #include "nsIDOMDocument.h"
@@ -140,21 +142,24 @@ protected:
     NS_METHOD TryParseAsSimpleRSS();
     NS_METHOD SetResourceTTL(PRInt32 ttl);
 
     // helpers
     NS_METHOD HandleRDFItem (nsIRDFDataSource *aDS, nsIRDFResource *itemResource,
                              nsIRDFResource *aLinkResource, nsIRDFResource *aTitleResource);
     NS_METHOD FindTextInNode (nsIDOMNode *aParentNode, nsAString &aString);
 
+    PRBool IsLinkValid(const PRUnichar *aURI);
+
     nsBookmarksService *mBMSVC;
     nsCOMPtr<nsIRDFDataSource> mInnerBMDataSource;
     nsCOMPtr<nsIURI> mURI;
     nsCOMPtr<nsIRDFResource> mResource;
     nsCOMPtr<nsIOutputStream> mCacheStream;
+    nsCOMPtr<nsIScriptSecurityManager> mSecMan;
     PRBool mAborted;
     nsCString mBody;
     nsCOMPtr<nsIRDFContainer> mLivemarkContainer;
 };
 
 NS_IMPL_ISUPPORTS2(nsFeedLoadListener, nsIStreamListener, nsIRequestObserver)
 
 NS_IMETHODIMP
@@ -236,16 +241,21 @@ nsFeedLoadListener::OnStopRequest(nsIReq
         }
     } while (0);
 
     if (NS_FAILED(rv)) {
         mBMSVC->Unassert (mResource, kNC_LivemarkLock, kTrueLiteral);
         return rv;
     }
 
+    /*
+     * Grab the security manager
+     */
+    mSecMan = do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID);
+
     /* We need to parse the returned data here, stored in mBody.  We
      * try parsing as RDF first, then as Atom and the "simple" RSS
      * (the userland 0.91/0.92/2.0 formats)
      */
 
     /* Try parsing as RDF */
     rv = TryParseAsRDF ();
 
@@ -517,16 +527,19 @@ nsFeedLoadListener::HandleRDFItem (nsIRD
     if (!linkLiteral || !titleLiteral)
         return NS_ERROR_FAILURE;
 
     const PRUnichar *linkStr, *titleStr;
     rv = linkLiteral->GetValueConst(&linkStr);
     rv |= titleLiteral->GetValueConst(&titleStr);
     if (NS_FAILED(rv)) return rv;
 
+    if (!IsLinkValid(linkStr))
+        return NS_OK;
+
     nsCOMPtr<nsIRDFResource> newBM;
     rv = mBMSVC->CreateBookmark (titleStr, linkStr, nsnull, nsnull, nsnull, nsnull,
                                  getter_AddRefs(newBM));
     if (NS_FAILED(rv)) return rv;
 
     rv = mLivemarkContainer->AppendElement(newBM);
     if (NS_FAILED(rv)) return rv;
 
@@ -703,17 +716,17 @@ nsFeedLoadListener::TryParseAsSimpleRSS 
                     rv = childNode->GetNextSibling(getter_AddRefs(temp));
                     childNode = temp;
                     if (!childNode || NS_FAILED(rv)) break;
                 }
 
                 if (titleStr.IsEmpty() && !dateStr.IsEmpty())
                     titleStr.Assign(dateStr);
 
-                if (!titleStr.IsEmpty() && !linkStr.IsEmpty()) {
+                if (!titleStr.IsEmpty() && !linkStr.IsEmpty() && IsLinkValid(linkStr.get())) {
                     nsCOMPtr<nsIRDFResource> newBM;
                     rv = mBMSVC->CreateBookmark (titleStr.get(), linkStr.get(),
                                                  nsnull, nsnull, nsnull, nsnull,
                                                  getter_AddRefs(newBM));
                     if (NS_FAILED(rv)) return rv;
 
                     rv = mLivemarkContainer->AppendElement(newBM);
                     if (NS_FAILED(rv)) return rv;
@@ -736,16 +749,40 @@ nsFeedLoadListener::TryParseAsSimpleRSS 
 #endif
         return NS_OK;
     }
 
     return NS_ERROR_FAILURE;
 }
 
 
+// return true if this link is valid and a livemark should be created;
+// otherwise, false.
+PRBool
+nsFeedLoadListener::IsLinkValid(const PRUnichar *aURI)
+{
+    nsCOMPtr<nsIURI> linkuri;
+    nsresult rv = NS_NewURI(getter_AddRefs(linkuri), nsDependentString(aURI));
+    if (NS_FAILED(rv))
+        return PR_FALSE;
+
+    // Er, where'd our security manager go?
+    if (!mSecMan)
+        return PR_FALSE;
+
+    rv = mSecMan->CheckLoadURI(mURI, linkuri,
+                               nsIScriptSecurityManager::DISALLOW_FROM_MAIL |
+                               nsIScriptSecurityManager::DISALLOW_SCRIPT_OR_DATA);
+    if (NS_FAILED(rv))
+        return PR_FALSE;
+
+    return PR_TRUE;
+}
+
+
 ///////////////////////////////////////////////////////////////////////////
 ////  Main entry point for nsBookmarksService to deal with Livemarks
 ////
 
 PRBool
 nsBookmarksService::LivemarkNeedsUpdate(nsIRDFResource* aSource)
 {
     nsresult rv;
