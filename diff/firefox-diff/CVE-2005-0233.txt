--- netwerk/dns/src/nsIDNService.cpp	4 Dec 2004 10:19:26 -0000	1.23
+++ netwerk/dns/src/nsIDNService.cpp	17 Feb 2005 04:12:07 -0000
@@ -47,79 +47,87 @@
 #include "nsIPrefBranchInternal.h"
 #include "nsIObserverService.h"
 #include "punycode.h"
 
 //-----------------------------------------------------------------------------
 // RFC 1034 - 3.1. Name space specifications and terminology
 static const PRUint32 kMaxDNSNodeLen = 63;
 
 //-----------------------------------------------------------------------------
 
-#define NS_NET_PREF_IDNTESTBED "network.IDN_testbed"
-#define NS_NET_PREF_IDNPREFIX  "network.IDN_prefix"
+#define NS_NET_PREF_IDNTESTBED      "network.IDN_testbed"
+#define NS_NET_PREF_IDNPREFIX       "network.IDN_prefix"
+#define NS_NET_PREF_IDNSHOWPUNYCODE "network.IDN_show_punycode"
 
 //-----------------------------------------------------------------------------
 // nsIDNService
 //-----------------------------------------------------------------------------
 
 /* Implementation file */
 NS_IMPL_THREADSAFE_ISUPPORTS3(nsIDNService,
                               nsIIDNService,
                               nsIObserver,
                               nsISupportsWeakReference)
 
 nsresult nsIDNService::Init()
 {
   nsCOMPtr<nsIPrefBranchInternal> prefInternal(do_GetService(NS_PREFSERVICE_CONTRACTID));
   if (prefInternal) {
     prefInternal->AddObserver(NS_NET_PREF_IDNTESTBED, this, PR_TRUE); 
     prefInternal->AddObserver(NS_NET_PREF_IDNPREFIX, this, PR_TRUE); 
+    prefsChanged(prefInternal, nsnull);
   }
-
   return NS_OK;
 }
 
 NS_IMETHODIMP nsIDNService::Observe(nsISupports *aSubject,
                                     const char *aTopic,
                                     const PRUnichar *aData)
 {
   if (!strcmp(aTopic, NS_PREFBRANCH_PREFCHANGE_TOPIC_ID)) {
     nsCOMPtr<nsIPrefBranch> prefBranch( do_QueryInterface(aSubject) );
-    if (prefBranch) {
-      // to support test environment which is a temporary testing environment
-      // until IDN is actually deployed
-      if (NS_LITERAL_STRING(NS_NET_PREF_IDNTESTBED).Equals(aData)) {
-        PRBool val;
-        if (NS_SUCCEEDED(prefBranch->GetBoolPref(NS_NET_PREF_IDNTESTBED, &val)))
-          mMultilingualTestBed = val;
-      }
-      else if (NS_LITERAL_STRING(NS_NET_PREF_IDNPREFIX).Equals(aData)) {
-        nsXPIDLCString prefix;
-        nsresult rv = prefBranch->GetCharPref(NS_NET_PREF_IDNPREFIX, getter_Copies(prefix));
-        if (NS_SUCCEEDED(rv) && prefix.Length() <= kACEPrefixLen)
-          PL_strncpyz(nsIDNService::mACEPrefix, prefix.get(), kACEPrefixLen + 1);
-      }
-    }
+    if (prefBranch)
+      prefsChanged(prefBranch, aData);
   }
-
   return NS_OK;
 }
 
+void nsIDNService::prefsChanged(nsIPrefBranch *prefBranch, const PRUnichar *pref)
+{
+  if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNTESTBED).Equals(pref)) {
+    PRBool val;
+    if (NS_SUCCEEDED(prefBranch->GetBoolPref(NS_NET_PREF_IDNTESTBED, &val)))
+      mMultilingualTestBed = val;
+  }
+  if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNPREFIX).Equals(pref)) {
+    nsXPIDLCString prefix;
+    nsresult rv = prefBranch->GetCharPref(NS_NET_PREF_IDNPREFIX, getter_Copies(prefix));
+    if (NS_SUCCEEDED(rv) && prefix.Length() <= kACEPrefixLen)
+      PL_strncpyz(nsIDNService::mACEPrefix, prefix.get(), kACEPrefixLen + 1);
+  }
+  if (!pref || NS_LITERAL_STRING(NS_NET_PREF_IDNSHOWPUNYCODE).Equals(pref)) {
+    PRBool val;
+    if (NS_SUCCEEDED(prefBranch->GetBoolPref(NS_NET_PREF_IDNSHOWPUNYCODE, &val)))
+      mShowPunyCode = val;
+  }
+}
+
 nsIDNService::nsIDNService()
 {
   nsresult rv;
 
   // initialize to the official prefix (RFC 3490 "5. ACE prefix")
   const char kIDNSPrefix[] = "xn--";
   strcpy(mACEPrefix, kIDNSPrefix);
 
   mMultilingualTestBed = PR_FALSE;
+  mShowPunyCode = PR_FALSE;
 
   if (idn_success != idn_nameprep_create(NULL, &mNamePrepHandle))
     mNamePrepHandle = nsnull;
 
   mNormalizer = do_GetService(NS_UNICODE_NORMALIZER_CONTRACTID, &rv);
   if (NS_FAILED(rv))
     mNormalizer = nsnull;
   /* member initializers and constructor code */
 }
 
@@ -176,21 +184,21 @@ NS_IMETHODIMP nsIDNService::ConvertUTF8t
   return NS_OK;
 }
 
 /* [noscript] string ConvertACEtoUTF8 (in string input); */
 NS_IMETHODIMP nsIDNService::ConvertACEtoUTF8(const nsACString & input, nsACString & _retval)
 {
   // RFC 3490 - 4.2 ToUnicode
   // ToUnicode never fails.  If any step fails, then the original input
   // sequence is returned immediately in that step.
 
-  if (!IsASCII(input)) {
+  if (mShowPunyCode || !IsASCII(input)) {
     _retval.Assign(input);
     return NS_OK;
   }
   
   PRUint32 len = 0, offset = 0;
   nsCAutoString decodedBuf;
 
   nsACString::const_iterator start, end;
   input.BeginReading(start); 
   input.EndReading(end); 
@@ -239,20 +247,23 @@ NS_IMETHODIMP nsIDNService::IsACE(const 
 
   *_retval = p && (p == data || *(p - 1) == '.');
   return NS_OK;
 }
 
 NS_IMETHODIMP nsIDNService::Normalize(const nsACString & input, nsACString & output)
 {
   // protect against bogus input
   NS_ENSURE_TRUE(IsUTF8(input), NS_ERROR_UNEXPECTED);
 
+  if (mShowPunyCode)
+    return ConvertUTF8toACE(input, output);
+
   nsAutoString outUTF16;
   nsresult rv = stringPrep(NS_ConvertUTF8toUTF16(input), outUTF16);
   if (NS_SUCCEEDED(rv))
     CopyUTF16toUTF8(outUTF16, output);
   return rv;
 }
 
 //-----------------------------------------------------------------------------
 
 static void utf16ToUcs4(const nsAString& in, PRUint32 *out, PRUint32 outBufLen, PRUint32 *outLen)
--- netwerk/dns/src/nsIDNService.h	18 Apr 2004 21:59:12 -0000	1.5
+++ netwerk/dns/src/nsIDNService.h	17 Feb 2005 04:12:07 -0000
@@ -39,20 +39,22 @@
 #ifndef nsIDNService_h__
 #define nsIDNService_h__
 
 #include "nsIIDNService.h"
 #include "nsCOMPtr.h"
 #include "nsIObserver.h"
 #include "nsWeakReference.h"
 #include "nsIUnicodeNormalizer.h"
 #include "nsIDNKitInterface.h"
 
+class nsIPrefBranch;
+
 //-----------------------------------------------------------------------------
 // nsIDNService
 //-----------------------------------------------------------------------------
 
 #define kACEPrefixLen 4 
 
 class nsIDNService : public nsIIDNService,
                      public nsIObserver,
                      public nsSupportsWeakReference
 {
@@ -65,18 +67,20 @@ public:
   virtual ~nsIDNService();
 
   nsresult Init();
 
 private:
   void normalizeFullStops(nsAString& s);
   nsresult stringPrepAndACE(const nsAString& in, nsACString& out);
   nsresult encodeToACE(const nsAString& in, nsACString& out);
   nsresult stringPrep(const nsAString& in, nsAString& out);
   nsresult decodeACE(const nsACString& in, nsACString& out);
+  void prefsChanged(nsIPrefBranch *prefBranch, const PRUnichar *pref);
   
   PRBool mMultilingualTestBed;  // if true generates extra node for mulitlingual testbed 
+  PRBool mShowPunyCode;
   idn_nameprep_t mNamePrepHandle;
   nsCOMPtr<nsIUnicodeNormalizer> mNormalizer;
   char mACEPrefix[kACEPrefixLen+1];
 };
 
 #endif  // nsIDNService_h__
