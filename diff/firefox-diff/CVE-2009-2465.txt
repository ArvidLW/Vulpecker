--- hg5.1f3d5e332a44/content/base/src/nsGenericElement.cpp	2009-03-19 04:07:26.526282200 +0100
+++ /usr/moz/hg5/content/base/src/nsGenericElement.cpp	2009-03-19 04:07:11.770282187 +0100
@@ -4291,16 +4291,18 @@ nsGenericElement::SetAttrAndNotify(PRInt
                                    PRBool aNotify,
                                    const nsAString* aValueForAfterSetAttr)
 {
   nsresult rv;
   PRUint8 modType = aModification ?
     static_cast<PRUint8>(nsIDOMMutationEvent::MODIFICATION) :
     static_cast<PRUint8>(nsIDOMMutationEvent::ADDITION);
 
+  // Scope ends the update batch before we fire the mutation event below.
+  {
   nsIDocument* document = GetCurrentDoc();
   mozAutoDocUpdate updateBatch(document, UPDATE_CONTENT_MODEL, aNotify);
 
   // When notifying, make sure to keep track of states whose value
   // depends solely on the value of an attribute.
   PRUint32 stateMask;
   if (aNotify) {
     stateMask = PRUint32(IntrinsicState());
@@ -4352,16 +4354,17 @@ nsGenericElement::SetAttrAndNotify(PRInt
   if (aNamespaceID == kNameSpaceID_XMLEvents && 
       aName == nsGkAtoms::event && mNodeInfo->GetDocument()) {
     mNodeInfo->GetDocument()->AddXMLEventsContent(this);
   }
   if (aValueForAfterSetAttr) {
     rv = AfterSetAttr(aNamespaceID, aName, aValueForAfterSetAttr, aNotify);
     NS_ENSURE_SUCCESS(rv, rv);
   }
+  }
 
   if (aFireMutation) {
     mozAutoRemovableBlockerRemover blockerRemover;
     
     nsMutationEvent mutation(PR_TRUE, NS_MUTATION_ATTRMODIFIED);
 
     nsAutoString attrName;
     aName->ToString(attrName);
