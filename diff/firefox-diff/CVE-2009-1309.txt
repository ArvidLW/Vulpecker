diff --git a/content/html/document/src/nsHTMLDocument.cpp b/content/html/document/src/nsHTMLDocument.cpp
--- a/content/html/document/src/nsHTMLDocument.cpp
+++ b/content/html/document/src/nsHTMLDocument.cpp
@@ -1813,41 +1813,45 @@ nsHTMLDocument::OpenCommon(const nsACStr
     return NS_OK;
   }
 
   // Note: We want to use GetDocumentFromContext here because this document
   // should inherit the security information of the document that's opening us,
   // (since if it's secure, then it's presumeably trusted).
   nsCOMPtr<nsIDocument> callerDoc =
     do_QueryInterface(nsContentUtils::GetDocumentFromContext());
+  if (!callerDoc) {
+    // If we're called from C++ or in some other way without an originating
+    // document we can't do a document.open w/o changing the principal of the
+    // document to something like about:blank (as that's the only sane thing to
+    // do when we don't know the origin of this call), and since we can't
+    // change the principals of a document for security reasons we'll have to
+    // refuse to go ahead with this call.
+
+    return NS_ERROR_DOM_SECURITY_ERR;
+  }
 
   // Grab a reference to the calling documents security info (if any)
   // and URIs as they may be lost in the call to Reset().
-  nsCOMPtr<nsISupports> securityInfo;
-  nsCOMPtr<nsIURI> uri, baseURI;
-  if (callerDoc) {
-    securityInfo = callerDoc->GetSecurityInfo();
-    uri = callerDoc->GetDocumentURI();
-    baseURI = callerDoc->GetBaseURI();
-  }
-
-  nsCOMPtr<nsIPrincipal> callerPrincipal;
-  nsIScriptSecurityManager *secMan = nsContentUtils::GetSecurityManager();
-
-  secMan->GetSubjectPrincipal(getter_AddRefs(callerPrincipal));
-
-  if (!callerPrincipal) {
-    // If we're called from C++ we can't do a document.open w/o
-    // changing the principal of the document to something like
-    // about:blank (as that's the only sane thing to do when we don't
-    // know the origin of this call), and since we can't change the
-    // principals of a document for security reasons we'll have to
-    // refuse to go ahead with this call.
-
-    return NS_ERROR_DOM_SECURITY_ERR;
+  nsCOMPtr<nsISupports> securityInfo = callerDoc->GetSecurityInfo();
+  nsCOMPtr<nsIURI> uri = callerDoc->GetDocumentURI();
+  nsCOMPtr<nsIURI> baseURI = callerDoc->GetBaseURI();
+  nsCOMPtr<nsIPrincipal> callerPrincipal = callerDoc->NodePrincipal();
+
+  nsIScriptSecurityManager* secMan = nsContentUtils::GetSecurityManager();
+  PRBool isSystem;
+  if (NS_SUCCEEDED(secMan->IsSystemPrincipal(callerPrincipal, &isSystem)) &&
+      isSystem) {
+    // Fall back on the subject principal in this case for compat reasons
+    nsCOMPtr<nsIPrincipal> subjectPrincipal;
+    secMan->GetSubjectPrincipal(getter_AddRefs(subjectPrincipal));
+    // Might be null; if so, don't use it
+    if (subjectPrincipal) {
+      subjectPrincipal.swap(callerPrincipal);
+    }
   }
 
   // We're called from script. Make sure the script is from the same
   // origin, not just that the caller can access the document. This is
   // needed to keep document principals from ever changing, which is
   // needed because of the way we use our XOW code, and is a sane
   // thing to do anyways.
 
