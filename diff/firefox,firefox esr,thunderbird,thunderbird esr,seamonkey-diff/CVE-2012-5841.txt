diff --git a/js/xpconnect/wrappers/FilteringWrapper.cpp b/js/xpconnect/wrappers/FilteringWrapper.cpp
--- a/js/xpconnect/wrappers/FilteringWrapper.cpp
+++ b/js/xpconnect/wrappers/FilteringWrapper.cpp
@@ -46,16 +46,18 @@ Filter(JSContext *cx, JSObject *wrapper, AutoIdVector &props)
 }
 
 template <typename Policy>
-static bool
+static void
 FilterSetter(JSContext *cx, JSObject *wrapper, jsid id, js::PropertyDescriptor *desc)
 {
+    JSErrorReporter reporter = JS_SetErrorReporter(cx, NULL);
     bool setAllowed = Policy::check(cx, wrapper, id, Wrapper::SET);
-    if (!setAllowed) {
-        if (JS_IsExceptionPending(cx))
-            return false;
+    if (!setAllowed || JS_IsExceptionPending(cx)) {
+        // On branch, we don't have a good way to differentiate between exceptions
+        // we want to throw and exceptions we want to squash. Squash them all.
+        JS_ClearPendingException(cx);
         desc->setter = nullptr;
     }
-    return true;
+    JS_SetErrorReporter(cx, reporter);
 }
 
 template <typename Base, typename Policy>
@@ -65,7 +67,8 @@ FilteringWrapper<Base, Policy>::getPropertyDescriptor(JSContext *cx, JSObject *w
 {
     if (!Base::getPropertyDescriptor(cx, wrapper, id, set, desc))
         return false;
-    return FilterSetter<Policy>(cx, wrapper, id, desc);
+    FilterSetter<Policy>(cx, wrapper, id, desc);
+    return true;
 }
 
 template <typename Base, typename Policy>
@@ -75,7 +78,8 @@ FilteringWrapper<Base, Policy>::getOwnPropertyDescriptor(JSContext *cx, JSObject
 {
     if (!Base::getOwnPropertyDescriptor(cx, wrapper, id, set, desc))
         return false;
-    return FilterSetter<Policy>(cx, wrapper, id, desc);
+    FilterSetter<Policy>(cx, wrapper, id, desc);
+    return true;
 }
 
 template <typename Base, typename Policy>