diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -1959,17 +1959,21 @@ nsCSSKeyframeRule::GetStyle(nsIDOMCSSSty
   }
   NS_ADDREF(*aStyle = mDOMDeclaration);
   return NS_OK;
 }
 
 void
 nsCSSKeyframeRule::ChangeDeclaration(css::Declaration* aDeclaration)
 {
-  mDeclaration = aDeclaration;
+  // Be careful to not assign to an nsAutoPtr if we would be assigning
+  // the thing it already holds.
+  if (aDeclaration != mDeclaration) {
+    mDeclaration = aDeclaration;
+  }
 
   if (mSheet) {
     mSheet->SetModifiedByChildRule();
   }
 }
 
 /* virtual */ size_t
 nsCSSKeyframeRule::SizeOfIncludingThis(nsMallocSizeOfFun aMallocSizeOf) const
diff --git a/xpcom/base/nsAutoPtr.h b/xpcom/base/nsAutoPtr.h
--- a/xpcom/base/nsAutoPtr.h
+++ b/xpcom/base/nsAutoPtr.h
@@ -61,16 +61,17 @@ class nsAutoPtr
         {
           assign(0);
           return reinterpret_cast<void**>(&mRawPtr);
         }
 
       void
       assign( T* newPtr )
         {
+          NS_ABORT_IF_FALSE(mRawPtr != newPtr || !newPtr, "This makes no sense!");
           T* oldPtr = mRawPtr;
           mRawPtr = newPtr;
           delete oldPtr;
         }
 
       // |class Ptr| helps us prevent implicit "copy construction"
       // through |operator T*() const| from a |const nsAutoPtr<T>|
       // because two implicit conversions in a row aren't allowed.
