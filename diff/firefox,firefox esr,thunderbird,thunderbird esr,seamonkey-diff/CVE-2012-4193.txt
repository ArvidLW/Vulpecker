diff --git a/js/src/jswrapper.cpp b/js/src/jswrapper.cpp
--- a/js/src/jswrapper.cpp
+++ b/js/src/jswrapper.cpp
@@ -200,13 +200,20 @@ IndirectWrapper::defaultValue(JSContext *cx, JSObject *wrapper_, JSType hint, Va
 {
     RootedObject wrapper(cx, wrapper_);
 
+    // NB: In addition to clearing the pending exception, we also have to temporarily
+    // disable the error reporter, because SpiderMonkey calls it directly if there's
+    // no JS code on the stack, which might be the case here.
     bool status;
-    if (!enter(cx, wrapper_, JSID_VOID, PUNCTURE, &status)) {
+    JSErrorReporter reporter = JS_SetErrorReporter(cx, NULL);
+    bool ok = enter(cx, wrapper_, JSID_VOID, PUNCTURE, &status);
+    JS_SetErrorReporter(cx, reporter);
+    if (!ok) {
         JS_ClearPendingException(cx);
         if (!DefaultValue(cx, wrapper, hint, vp))
             return false;
         return true;
     }
+
     /*
      * We enter the compartment of the wrappee here, even if we're not a cross
      * compartment wrapper. Moreover, cross compartment wrappers do not enter
@@ -296,8 +303,14 @@ DirectWrapper::defaultValue(JSContext *cx, JSObject *wrapper_, JSType hint, Valu
 {
     RootedObject wrapper(cx, wrapper_);
 
+    // NB: In addition to clearing the pending exception, we also have to temporarily
+    // disable the error reporter, because SpiderMonkey calls it directly if there's
+    // no JS code on the stack, which might be the case here.
     bool status;
-    if (!enter(cx, wrapper_, JSID_VOID, PUNCTURE, &status)) {
+    JSErrorReporter reporter = JS_SetErrorReporter(cx, NULL);
+    bool ok = enter(cx, wrapper_, JSID_VOID, PUNCTURE, &status);
+    JS_SetErrorReporter(cx, reporter);
+    if (!ok) {
         RootedValue v(cx);
         JS_ClearPendingException(cx);
         if (!DefaultValue(cx, wrapper, hint, vp))
-- 
1.7.9.6 (Apple Git-31.1)
