diff --git a/content/base/src/nsImageLoadingContent.cpp b/content/base/src/nsImageLoadingContent.cpp
--- a/content/base/src/nsImageLoadingContent.cpp
+++ b/content/base/src/nsImageLoadingContent.cpp
@@ -104,29 +104,16 @@ nsImageLoadingContent::DestroyImageLoadi
 nsImageLoadingContent::~nsImageLoadingContent()
 {
   NS_ASSERTION(!mCurrentRequest && !mPendingRequest,
                "DestroyImageLoadingContent not called");
   NS_ASSERTION(!mObserverList.mObserver && !mObserverList.mNext,
                "Observers still registered?");
 }
 
-// Macro to call some func on each observer.  This handles observers
-// removing themselves.
-#define LOOP_OVER_OBSERVERS(func_)                                       \
-  PR_BEGIN_MACRO                                                         \
-    for (ImageObserver* observer = &mObserverList, *next; observer;      \
-         observer = next) {                                              \
-      next = observer->mNext;                                            \
-      if (observer->mObserver) {                                         \
-        observer->mObserver->func_;                                      \
-      }                                                                  \
-    }                                                                    \
-  PR_END_MACRO
-
 /*
  * imgINotificationObserver impl
  */
 NS_IMETHODIMP
 nsImageLoadingContent::Notify(imgIRequest* aRequest,
                               int32_t aType,
                               const nsIntRect* aData)
 {
@@ -137,17 +124,27 @@ nsImageLoadingContent::Notify(imgIReques
   if (aType == imgINotificationObserver::LOAD_COMPLETE) {
     // We should definitely have a request here
     NS_ABORT_IF_FALSE(aRequest, "no request?");
 
     NS_PRECONDITION(aRequest == mCurrentRequest || aRequest == mPendingRequest,
                     "Unknown request");
   }
 
-  LOOP_OVER_OBSERVERS(Notify(aRequest, aType, aData));
+  {
+    nsAutoScriptBlocker scriptBlocker;
+
+    for (ImageObserver* observer = &mObserverList, *next; observer;
+         observer = next) {
+      next = observer->mNext;
+      if (observer->mObserver) {
+        observer->mObserver->Notify(aRequest, aType, aData);
+      }
+    }
+  }
 
   if (aType == imgINotificationObserver::SIZE_AVAILABLE) {
     // Have to check for state changes here, since we might have been in
     // the LOADING state before.
     UpdateImageState(true);
   }
 
   if (aType == imgINotificationObserver::LOAD_COMPLETE) {

