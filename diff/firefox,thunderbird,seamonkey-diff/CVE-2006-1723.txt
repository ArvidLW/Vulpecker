--- jsxml.c	17 Feb 2006 21:40:04 -0000	3.87
+++ jsxml.c	22 Feb 2006 02:06:56 -0000
@@ -4738,48 +4738,54 @@ bad:
 }
 
 /* ECMA-357 9.1.1.10 XML [[ResolveValue]], 9.2.1.10 XMLList [[ResolveValue]]. */
 static JSBool
 ResolveValue(JSContext *cx, JSXML *list, JSXML **result)
 {
     JSXML *target, *base;
     JSXMLQName *targetprop;
+    JSObject *targetpropobj;
     jsval id, tv;
 
     /* Our caller must be protecting newborn objects. */
     JS_ASSERT(cx->localRootStack);
 
     if (list->xml_class != JSXML_CLASS_LIST || list->xml_kids.length != 0) {
         if (!js_GetXMLObject(cx, list))
             return JS_FALSE;
         *result = list;
         return JS_TRUE;
     }
 
     target = list->xml_target;
     targetprop = list->xml_targetprop;
-    if (!target ||
-        !targetprop ||
-        OBJ_GET_CLASS(cx, targetprop->object) == &js_AttributeNameClass ||
-        IS_STAR(targetprop->localName)) {
+    if (!target || !targetprop || IS_STAR(targetprop->localName)) {
+        *result = NULL;
+        return JS_TRUE;
+    }
+
+    targetpropobj = js_GetXMLQNameObject(cx, targetprop);
+    if (!targetpropobj)
+        return JS_FALSE;
+    if (OBJ_GET_CLASS(cx, targetpropobj) == &js_AttributeNameClass) {
         *result = NULL;
         return JS_TRUE;
     }
 
     if (!ResolveValue(cx, target, &base))
         return JS_FALSE;
     if (!base) {
         *result = NULL;
         return JS_TRUE;
     }
     if (!js_GetXMLObject(cx, base))
         return JS_FALSE;
 
-    id = OBJECT_TO_JSVAL(targetprop->object);
+    id = OBJECT_TO_JSVAL(targetpropobj);
     if (!GetProperty(cx, base->object, id, &tv))
         return JS_FALSE;
     target = (JSXML *) JS_GetPrivate(cx, JSVAL_TO_OBJECT(tv));
 
     if (JSXML_LENGTH(target) == 0) {
         if (base->xml_class == JSXML_CLASS_LIST && JSXML_LENGTH(base) > 1) {
             *result = NULL;
             return JS_TRUE;
@@ -7233,19 +7239,19 @@ js_NewXML(JSContext *cx, JSXMLClass xml_
  */
 static void
 xml_mark_tail(JSContext *cx, JSXML *xml, void *arg)
 {
     XMLArrayTrim(&xml->xml_kids);
 
     if (xml->xml_class == JSXML_CLASS_LIST) {
         if (xml->xml_target)
-            js_MarkXML(cx, xml->xml_target, arg);
+            JS_MarkGCThing(cx, xml->xml_target, "target", arg);
         if (xml->xml_targetprop)
-            js_MarkXMLQName(cx, xml->xml_targetprop, arg);
+            JS_MarkGCThing(cx, xml->xml_targetprop, "targetprop", arg);
     } else {
         namespace_mark_vector(cx,
                               (JSXMLNamespace **) xml->xml_namespaces.vector,
                               xml->xml_namespaces.length,
                               arg);
         XMLArrayTrim(&xml->xml_namespaces);
 
         xml_mark_vector(cx,
