diff --git a/uriloader/exthandler/win/nsMIMEInfoWin.cpp b/uriloader/exthandler/win/nsMIMEInfoWin.cpp
--- a/uriloader/exthandler/win/nsMIMEInfoWin.cpp
+++ b/uriloader/exthandler/win/nsMIMEInfoWin.cpp
@@ -60,16 +60,18 @@
 #ifdef UNICODE
 #define SHELLEXECUTEINFOW SHELLEXECUTEINFO
 #define ShellExecuteExW ShellExecuteEx
 #else
 #error "we don't support narrow char wince"
 #endif
 #endif
 
+#define RUNDLL32_EXE L"\\rundll32.exe"
+
 
 NS_IMPL_ISUPPORTS_INHERITED1(nsMIMEInfoWin, nsMIMEInfoBase, nsIPropertyBag)
 
 nsMIMEInfoWin::~nsMIMEInfoWin()
 {
 }
 
 nsresult
@@ -128,23 +130,29 @@ nsMIMEInfoWin::LaunchWithFile(nsIFile* a
 
         // executable is rundll32, everything else is a list of parameters, 
         // including the dll handler.
         nsCOMPtr<nsILocalFile> locFile(do_QueryInterface(aFile));
 
         if (!GetDllLaunchInfo(executable, locFile, args, PR_FALSE))
           return NS_ERROR_INVALID_ARG;
 
+        WCHAR rundll32Path[MAX_PATH + sizeof(RUNDLL32_EXE) / sizeof(WCHAR) + 1] = {L'\0'};
+        if (!GetSystemDirectoryW(rundll32Path, MAX_PATH)) {
+          return NS_ERROR_FILE_NOT_FOUND;
+        }
+        lstrcatW(rundll32Path, RUNDLL32_EXE);
+
         SHELLEXECUTEINFOW seinfo;
         memset(&seinfo, 0, sizeof(seinfo));
         seinfo.cbSize = sizeof(SHELLEXECUTEINFOW);
         seinfo.fMask  = NULL;
         seinfo.hwnd   = NULL;
         seinfo.lpVerb = NULL;
-        seinfo.lpFile = L"rundll32.exe";
+        seinfo.lpFile = rundll32Path;
         seinfo.lpParameters =  args.get();
         seinfo.lpDirectory  = NULL;
         seinfo.nShow  = SW_SHOWNORMAL;
         if (ShellExecuteExW(&seinfo))
           return NS_OK;
 
         switch ((LONG_PTR)seinfo.hInstApp) {
           case 0:
