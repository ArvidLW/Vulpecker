--- src.old/js/src/liveconnect/jsj_JavaObject.c	2005-01-12 13:21:12.000000000 -0600
+++ src/js/src/liveconnect/jsj_JavaObject.c	2006-09-14 11:55:23.623147845 -0500
@@ -87,31 +87,32 @@
 #endif
 
 static JSBool installed_GC_callback = JS_FALSE;
 static JSGCCallback old_GC_callback = NULL;
 static JavaObjectWrapper* deferred_wrappers = NULL;
 
 static JSBool JS_DLL_CALLBACK jsj_GC_callback(JSContext *cx, JSGCStatus status)
 {
     if (status == JSGC_END && deferred_wrappers) {
         JNIEnv *jEnv;
         JSJavaThreadState *jsj_env = jsj_EnterJava(cx, &jEnv);
         if (jEnv) {
             JavaObjectWrapper* java_wrapper = deferred_wrappers;
             while (java_wrapper) {
                 deferred_wrappers = java_wrapper->u.next;
-                (*jEnv)->DeleteGlobalRef(jEnv, java_wrapper->java_obj);
+                if (java_wrapper->java_obj)
+                    (*jEnv)->DeleteGlobalRef(jEnv, java_wrapper->java_obj);
                 jsj_ReleaseJavaClassDescriptor(cx, jEnv, java_wrapper->class_descriptor);
                 JS_free(cx, java_wrapper);
                 java_wrapper = deferred_wrappers;
             }
             jsj_ExitJava(jsj_env);
         }
     }
     /* always chain to old GC callback if non-null. */
     return old_GC_callback ? old_GC_callback(cx, status) : JS_TRUE;
 }
 
 JSBool
 jsj_InitJavaObjReflectionsTable(void)
 {
     JS_ASSERT(!java_obj_reflections);
@@ -288,46 +289,46 @@
 }
 
 JS_EXPORT_API(void)
 JavaObject_finalize(JSContext *cx, JSObject *obj)
 {
     JavaObjectWrapper *java_wrapper;
     jobject java_obj;
     JNIEnv *jEnv;
     JSJavaThreadState *jsj_env;
 
     java_wrapper = JS_GetPrivate(cx, obj);
     if (!java_wrapper)
         return;
     java_obj = java_wrapper->java_obj;
 
-    jsj_env = jsj_EnterJava(cx, &jEnv);
-    if (!jEnv)
-        return;
-
     if (java_obj) {
         remove_java_obj_reflection_from_hashtable(java_obj, java_wrapper->u.hash_code);
-
         /* defer releasing global refs until it is safe to do so. */
         java_wrapper->u.next = deferred_wrappers;
         deferred_wrappers = java_wrapper;
     } else {
-        jsj_ReleaseJavaClassDescriptor(cx, jEnv, java_wrapper->class_descriptor);
-        JS_free(cx, java_wrapper);
+        jsj_env = jsj_EnterJava(cx, &jEnv);
+        if (jEnv) {
+            jsj_ReleaseJavaClassDescriptor(cx, jEnv, java_wrapper->class_descriptor);
+            JS_free(cx, java_wrapper);
+            jsj_ExitJava(jsj_env);
+        } else {
+            java_wrapper->u.next = deferred_wrappers;
+            deferred_wrappers = java_wrapper;
+        }
     }
-
-    jsj_ExitJava(jsj_env);
 }
 
 /* Trivial helper for jsj_DiscardJavaObjReflections(), below */
 static JSIntn
 enumerate_remove_java_obj(JSJHashEntry *he, JSIntn i, void *arg)
 {
     JSJavaThreadState *jsj_env = (JSJavaThreadState *)arg;
     JNIEnv *jEnv = jsj_env->jEnv;
     jobject java_obj;
     JavaObjectWrapper *java_wrapper;
     JSObject *java_wrapper_obj;
 
     java_wrapper_obj = (JSObject *)he->value;
 
     /* Warning: NULL argument may cause assertion in JS engine, but it's actually OK */
