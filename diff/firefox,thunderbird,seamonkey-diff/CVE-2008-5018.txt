--- jsdate.c	11 Aug 2008 18:21:27 -0000	3.111
+++ jsdate.c	27 Oct 2008 17:21:59 -0000
@@ -473,22 +473,25 @@ msFromTime(jsdouble t)
 /*
  * Other Support routines and definitions
  */
 
 /*
  * We use the first reseved slot to store UTC time, and the second for caching
  * the local time. The initial value of the cache entry is NaN.
  */
-#define UTC_TIME_SLOT           0
-#define LOCAL_TIME_SLOT         1
+#define JSSLOT_UTC_TIME         JSSLOT_PRIVATE
+#define JSSLOT_LOCAL_TIME       (JSSLOT_PRIVATE + 1)
+
+#define DATE_RESERVED_SLOTS     2
 
 JSClass js_DateClass = {
     js_Date_str,
-    JSCLASS_HAS_RESERVED_SLOTS(2) |  JSCLASS_HAS_CACHED_PROTO(JSProto_Date),
+    JSCLASS_HAS_RESERVED_SLOTS(DATE_RESERVED_SLOTS) |
+    JSCLASS_HAS_CACHED_PROTO(JSProto_Date),
     JS_PropertyStub,  JS_PropertyStub,  JS_PropertyStub,  JS_PropertyStub,
     JS_EnumerateStub, JS_ResolveStub,   JS_ConvertStub,   JS_FinalizeStub,
     JSCLASS_NO_OPTIONAL_MEMBERS
 };
 
 /* for use by date_parse */
 
 static const char* wtb[] = {
@@ -921,46 +924,39 @@ date_now(JSContext *cx, uintN argc, jsva
 
 /*
  * Get UTC time from the date object. Returns false if the object is not
  * Date type.
  */
 static JSBool
 GetUTCTime(JSContext *cx, JSObject *obj, jsval *vp, jsdouble *dp)
 {
-    jsval v;
-
     if (!JS_InstanceOf(cx, obj, &js_DateClass, vp ? vp + 2 : NULL))
         return JS_FALSE;
-    if (!JS_GetReservedSlot(cx, obj, UTC_TIME_SLOT, &v))
-        return JS_FALSE;
-
-    *dp = *JSVAL_TO_DOUBLE(v);
+    *dp = *JSVAL_TO_DOUBLE(obj->fslots[JSSLOT_UTC_TIME]);
     return JS_TRUE;
 }
 
 /*
  * Set UTC time slot with a pointer pointing to a jsdouble. This function is
  * used only for setting UTC time to some predefined values, such as NaN.
  *
  * It also invalidates cached local time.
  */
 static JSBool
 SetUTCTimePtr(JSContext *cx, JSObject *obj, jsval *vp, jsdouble *dp)
 {
     if (vp && !JS_InstanceOf(cx, obj, &js_DateClass, vp + 2))
         return JS_FALSE;
+    JS_ASSERT_IF(!vp, STOBJ_GET_CLASS(obj) == &js_DateClass);
 
     /* Invalidate local time cache. */
-    if (!JS_SetReservedSlot(cx, obj, LOCAL_TIME_SLOT,
-                            DOUBLE_TO_JSVAL(cx->runtime->jsNaN))) {
-        return JS_FALSE;
-    }
-
-    return JS_SetReservedSlot(cx, obj, UTC_TIME_SLOT, DOUBLE_TO_JSVAL(dp));
+    obj->fslots[JSSLOT_LOCAL_TIME] = DOUBLE_TO_JSVAL(cx->runtime->jsNaN);
+    obj->fslots[JSSLOT_UTC_TIME] = DOUBLE_TO_JSVAL(dp);
+    return JS_TRUE;
 }
 
 /*
  * Set UTC time to a given time.
  */
 static JSBool
 SetUTCTime(JSContext *cx, JSObject *obj, jsval *vp, jsdouble t)
 {
@@ -976,37 +972,35 @@ SetUTCTime(JSContext *cx, JSObject *obj,
  */
 static JSBool
 GetAndCacheLocalTime(JSContext *cx, JSObject *obj, jsval *vp, jsdouble *dp)
 {
     jsval v;
     jsdouble result;
     jsdouble *cached;
 
-    if (!obj || !JS_GetReservedSlot(cx, obj, LOCAL_TIME_SLOT, &v))
+    if (!obj || !JS_InstanceOf(cx, obj, &js_DateClass, vp ? vp + 2 : NULL))
         return JS_FALSE;
+    v = obj->fslots[JSSLOT_LOCAL_TIME];
 
     result = *JSVAL_TO_DOUBLE(v);
 
     if (JSDOUBLE_IS_NaN(result)) {
         if (!GetUTCTime(cx, obj, vp, &result))
             return JS_FALSE;
 
         /* if result is NaN, it couldn't be finite. */
         if (JSDOUBLE_IS_FINITE(result))
             result = LocalTime(result);
 
         cached = js_NewWeaklyRootedDouble(cx, result);
         if (!cached)
             return JS_FALSE;
 
-        if (!JS_SetReservedSlot(cx, obj, LOCAL_TIME_SLOT,
-                                DOUBLE_TO_JSVAL(cached))) {
-            return JS_FALSE;
-        }
+        obj->fslots[JSSLOT_LOCAL_TIME] = DOUBLE_TO_JSVAL(cached);
     }
 
     *dp = result;
     return JS_TRUE;
 }
 
 /*
  * See ECMA 15.9.5.4 thru 15.9.5.23
@@ -2023,20 +2017,18 @@ static jsdouble *
 date_constructor(JSContext *cx, JSObject* obj)
 {
     jsdouble *date;
 
     date = js_NewWeaklyRootedDouble(cx, 0.0);
     if (!date)
         return NULL;
 
-    JS_SetReservedSlot(cx, obj, UTC_TIME_SLOT,
-                       DOUBLE_TO_JSVAL(date));
-    JS_SetReservedSlot(cx, obj, LOCAL_TIME_SLOT,
-                       DOUBLE_TO_JSVAL(cx->runtime->jsNaN));
+    obj->fslots[JSSLOT_UTC_TIME] = DOUBLE_TO_JSVAL(date);
+    obj->fslots[JSSLOT_LOCAL_TIME] = DOUBLE_TO_JSVAL(cx->runtime->jsNaN);
     return date;
 }
 
 static JSBool
 Date(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
 {
     jsdouble *date;
     JSString *str;
