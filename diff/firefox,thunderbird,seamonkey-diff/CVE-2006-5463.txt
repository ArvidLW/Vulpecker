--- jsscript.c	4 Oct 2006 04:40:18 -0000	3.115
+++ jsscript.c	6 Oct 2006 17:52:25 -0000
@@ -156,31 +156,41 @@ script_toString(JSContext *cx, JSObject 
     return JS_TRUE;
 }
 
 static JSBool
 script_compile(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
                jsval *rval)
 {
     JSScript *oldscript, *script;
-    JSString *str;
     JSStackFrame *fp, *caller;
+    JSString *str;
     JSObject *scopeobj;
     const char *file;
     uintN line;
     JSPrincipals *principals;
 
     /* Make sure obj is a Script object. */
     if (!JS_InstanceOf(cx, obj, &js_ScriptClass, argv))
         return JS_FALSE;
 
     /* If no args, leave private undefined and return early. */
     if (argc == 0)
         goto out;
 
+    /* XXX thread safety was completely neglected in this function... */
+    oldscript = (JSScript *) JS_GetPrivate(cx, obj);
+    for (fp = cx->fp; fp; fp = fp->down) {
+        if (fp->script == oldscript) {
+            JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
+                                 JSMSG_SELF_MODIFYING_SCRIPT);
+            return JS_FALSE;
+        }
+    }
+
     /* Otherwise, the first arg is the script source to compile. */
     str = js_ValueToString(cx, argv[0]);
     if (!str)
         return JS_FALSE;
     argv[0] = STRING_TO_JSVAL(str);
 
     /* Compile using the caller's scope chain, which js_Invoke passes to fp. */
     fp = cx->fp;
@@ -227,17 +237,16 @@ script_compile(JSContext *cx, JSObject *
     script = JS_CompileUCScriptForPrincipals(cx, scopeobj, principals,
                                              JSSTRING_CHARS(str),
                                              JSSTRING_LENGTH(str),
                                              file, line);
     if (!script)
         return JS_FALSE;
 
     /* Swap script for obj's old script, if any. */
-    oldscript = (JSScript *) JS_GetPrivate(cx, obj);
     if (!JS_SetPrivate(cx, obj, script)) {
         js_DestroyScript(cx, script);
         return JS_FALSE;
     }
     if (oldscript)
         js_DestroyScript(cx, oldscript);
 
     script->object = obj;
