--- js/src/xpconnect/src/xpcwrappedjsclass.cpp	1 Jun 2005 01:21:23 -0000	1.84
+++ js/src/xpconnect/src/xpcwrappedjsclass.cpp	25 Oct 2005 23:00:14 -0000
@@ -507,19 +507,19 @@ nsXPCWrappedJSClass::DelegatedQueryInter
     if(aIID.Equals(NS_GET_IID(WrappedJSIdentity)))
     {
         // asking to find out if this is a wrapper object
         *aInstancePtr = WrappedJSIdentity::GetSingleton();
         return NS_OK;
     }
 
 #ifdef XPC_IDISPATCH_SUPPORT
     // If IDispatch is enabled and we're QI'ing to IDispatch
-    else if(nsXPConnect::IsIDispatchEnabled() && aIID.Equals(NSID_IDISPATCH))
+    if(nsXPConnect::IsIDispatchEnabled() && aIID.Equals(NSID_IDISPATCH))
     {
         return XPCIDispatchExtension::IDispatchQIWrappedJS(self, aInstancePtr);
     }
 #endif
     if(aIID.Equals(NS_GET_IID(nsIPropertyBag)))
     {
         // We only want to expose one implementation from our aggregate.
         nsXPCWrappedJS* root = self->GetRootWrapper();
 
@@ -578,22 +578,46 @@ nsXPCWrappedJSClass::DelegatedQueryInter
     {
         NS_ADDREF(sibling);
         *aInstancePtr = (void*) sibling;
         return NS_OK;
     }
 
     // else we do the more expensive stuff...
 
     // check if the JSObject claims to implement this interface
-    JSObject* jsobj = CallQueryInterfaceOnJSObject(ccx, self->GetJSObject(), aIID);
-    if(jsobj && XPCConvert::JSObject2NativeInterface(ccx, aInstancePtr, jsobj,
-                                                     &aIID, nsnull, nsnull))
-        return NS_OK;
+    JSObject* jsobj = CallQueryInterfaceOnJSObject(ccx, self->GetJSObject(),
+                                                   aIID);
+    if (jsobj)
+    {
+        // We can't use XPConvert::JSObject2NativeInterface() here
+        // since that can find a XPCWrappedNative direcly on the proto
+        // chain, and we don't want that here. We need to find the
+        // actual JS object that claimed it supports the interface
+        // we're looking for or we'll potentially bypass security
+        // checks etc by calling directly trough to a native found on
+        // the prototype.
+        //
+        // In stead, simply do the nsXPCWrappedJS part of
+        // XPConvert::JSObject2NativeInterface() here to make sure we
+        // get a new (or used) nsXPCWrappedJS here.
+        nsXPCWrappedJS* wrapper;
+        nsresult rv = nsXPCWrappedJS::GetNewOrUsed(ccx, jsobj, aIID, nsnull,
+                                                   &wrapper);
+        if(NS_SUCCEEDED(rv) && wrapper)
+        {
+            // We need to go through the QueryInterface logic to make
+            // this return the right thing for the various 'special'
+            // interfaces; e.g.  nsIPropertyBag.
+            rv = wrapper->QueryInterface(aIID, aInstancePtr);
+            NS_RELEASE(wrapper);
+            return rv;
+        }
+    }
 
     // else...
     // no can do
     *aInstancePtr = nsnull;
     return NS_NOINTERFACE;
 }
 
 JSObject*
 nsXPCWrappedJSClass::GetRootJSObject(XPCCallContext& ccx, JSObject* aJSObj)
