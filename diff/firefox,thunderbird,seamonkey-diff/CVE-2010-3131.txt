diff --git a/widget/src/windows/nsUXThemeData.cpp b/widget/src/windows/nsUXThemeData.cpp
--- a/widget/src/windows/nsUXThemeData.cpp
+++ b/widget/src/windows/nsUXThemeData.cpp
@@ -91,41 +91,41 @@ nsUXThemeData::Teardown() {
     FreeLibrary(sDwmDLL);
 }
 
 void
 nsUXThemeData::Initialize()
 {
   ::ZeroMemory(sThemes, sizeof(sThemes));
   NS_ASSERTION(!sThemeDLL, "nsUXThemeData being initialized twice!");
-  sThemeDLL = ::LoadLibraryW(kThemeLibraryName);
-  if (sThemeDLL) {
+
+  PRInt32 version = nsWindow::GetWindowsVersion();
+  sIsXPOrLater = version >= WINXP_VERSION;
+  sIsVistaOrLater = version >= VISTA_VERSION;
+
+  if (GetThemeDLL()) {
     openTheme = (OpenThemeDataPtr)GetProcAddress(sThemeDLL, "OpenThemeData");
     closeTheme = (CloseThemeDataPtr)GetProcAddress(sThemeDLL, "CloseThemeData");
     drawThemeBG = (DrawThemeBackgroundPtr)GetProcAddress(sThemeDLL, "DrawThemeBackground");
     drawThemeEdge = (DrawThemeEdgePtr)GetProcAddress(sThemeDLL, "DrawThemeEdge");
     getThemeContentRect = (GetThemeContentRectPtr)GetProcAddress(sThemeDLL, "GetThemeBackgroundContentRect");
     getThemePartSize = (GetThemePartSizePtr)GetProcAddress(sThemeDLL, "GetThemePartSize");
     getThemeSysFont = (GetThemeSysFontPtr)GetProcAddress(sThemeDLL, "GetThemeSysFont");
     getThemeColor = (GetThemeColorPtr)GetProcAddress(sThemeDLL, "GetThemeColor");
     getThemeMargins = (GetThemeMarginsPtr)GetProcAddress(sThemeDLL, "GetThemeMargins");
     isAppThemed = (IsAppThemedPtr)GetProcAddress(sThemeDLL, "IsAppThemed");
     getCurrentThemeName = (GetCurrentThemeNamePtr)GetProcAddress(sThemeDLL, "GetCurrentThemeName");
     getThemeSysColor = (GetThemeSysColorPtr)GetProcAddress(sThemeDLL, "GetThemeSysColor");
   }
-  sDwmDLL = ::LoadLibraryW(kDwmLibraryName);
-  if(sDwmDLL) {
+  if (GetDwmDLL()) {
     dwmExtendFrameIntoClientAreaPtr = (DwmExtendFrameIntoClientAreaProc)::GetProcAddress(sDwmDLL, "DwmExtendFrameIntoClientArea");
     dwmIsCompositionEnabledPtr = (DwmIsCompositionEnabledProc)::GetProcAddress(sDwmDLL, "DwmIsCompositionEnabled");
     CheckForCompositor();
   }
 
-  PRInt32 version = ::GetWindowsVersion();
-  sIsXPOrLater = version >= WINXP_VERSION;
-  sIsVistaOrLater = version >= VISTA_VERSION;
   Invalidate();
 }
 
 void
 nsUXThemeData::Invalidate() {
   for(int i = 0; i < eUXNumClasses; i++) {
     if(sThemes[i]) {
       closeTheme(sThemes[i]);
@@ -152,16 +152,30 @@ nsUXThemeData::GetTheme(nsUXThemeClass c
     return NULL;
   if(!sThemes[cls])
   {
     sThemes[cls] = openTheme(NULL, GetClassName(cls));
   }
   return sThemes[cls];
 }
 
+HMODULE
+nsUXThemeData::GetThemeDLL() {
+  if (!sThemeDLL && sIsXPOrLater)
+    sThemeDLL = ::LoadLibraryW(kThemeLibraryName);
+  return sThemeDLL;
+}
+
+HMODULE
+nsUXThemeData::GetDwmDLL() {
+  if (!sDwmDLL && sIsVistaOrLater)
+    sDwmDLL = ::LoadLibraryW(kDwmLibraryName);
+  return sDwmDLL;
+}
+
 const wchar_t *nsUXThemeData::GetClassName(nsUXThemeClass cls) {
   switch(cls) {
     case eUXButton:
       return L"Button";
     case eUXEdit:
       return L"Edit";
     case eUXTooltip:
       return L"Tooltip";
diff --git a/widget/src/windows/nsUXThemeData.h b/widget/src/windows/nsUXThemeData.h
--- a/widget/src/windows/nsUXThemeData.h
+++ b/widget/src/windows/nsUXThemeData.h
@@ -89,16 +89,18 @@ public:
   static BOOL sFlatMenus;
   static PRPackedBool sIsXPOrLater;
   static PRPackedBool sIsVistaOrLater;
   static PRPackedBool sHaveCompositor;
   static void Initialize();
   static void Teardown();
   static void Invalidate();
   static HANDLE GetTheme(nsUXThemeClass cls);
+  static HMODULE GetThemeDLL();
+  static HMODULE GetDwmDLL();
 
   static inline BOOL IsAppThemed() {
     return isAppThemed && isAppThemed();
   }
 
   static inline HRESULT GetThemeColor(nsUXThemeClass cls, int iPartId, int iStateId,
                                                    int iPropId, OUT COLORREF* pFont) {
     if(!getThemeColor)
