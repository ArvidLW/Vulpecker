--- content/html/document/src/nsHTMLDocument.cpp	12 Jun 2006 22:39:53 -0000	3.683
+++ content/html/document/src/nsHTMLDocument.cpp	30 Jun 2006 19:55:28 -0000
@@ -1908,30 +1908,41 @@ nsresult
 nsHTMLDocument::OpenCommon(const nsACString& aContentType, PRBool aReplace)
 {
   if (IsXHTML()) {
     // No calling document.open() on XHTML
 
     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
   }
 
+  nsresult rv = NS_OK;
+
+  nsPIDOMWindow *win = GetWindow();
+  if (win) {
+    nsCOMPtr<nsIDOMElement> frameElement;
+    rv = win->GetFrameElement(getter_AddRefs(frameElement));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    if (frameElement && !nsContentUtils::CanCallerAccess(frameElement)) {
+      return NS_ERROR_DOM_SECURITY_ERR;
+    }
+  }
+
   // If we already have a parser we ignore the document.open call.
   if (mParser) {
 
     return NS_OK;
   }
 
   if (!aContentType.EqualsLiteral("text/html") &&
       !aContentType.EqualsLiteral("text/plain")) {
     NS_WARNING("Unsupported type; fix the caller");
     return NS_ERROR_DOM_NOT_SUPPORTED_ERR;
   }
 
-  nsresult rv = NS_OK;
-
   // Note: We want to use GetDocumentFromContext here because this document
   // should inherit the security information of the document that's opening us,
   // (since if it's secure, then it's presumeably trusted).
   nsCOMPtr<nsIDocument> callerDoc =
     do_QueryInterface(nsContentUtils::GetDocumentFromContext());
 
   // Grab a reference to the calling documents security info (if any)
   // and principal as it may be lost in the call to Reset().
