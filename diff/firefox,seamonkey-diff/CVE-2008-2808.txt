--- netwerk/streamconv/converters/nsIndexedToHTML.cpp	16 Jan 2008 01:44:25 -0000	1.89
+++ netwerk/streamconv/converters/nsIndexedToHTML.cpp	28 Feb 2008 09:24:58 -0000
@@ -555,17 +555,20 @@ nsIndexedToHTML::OnStartRequest(nsIReque
     // 358128.
 
     if (baseUri.FindChar('"') == kNotFound)
     {
         // Great, the baseUri does not contain a char that
         // will prematurely close the string.  Go ahead an
         // add a base href.
         buffer.AppendLiteral("<base href=\"");
-        AppendASCIItoUTF16(baseUri, buffer);
+        NS_ConvertUTF8toUTF16 utf16BaseURI(baseUri);
+        nsString htmlEscapedUri;
+        htmlEscapedUri.Adopt(nsEscapeHTML2(utf16BaseURI.get(), utf16BaseURI.Length()));
+        buffer.Append(htmlEscapedUri);
         buffer.AppendLiteral("\">\n");
     }
     else
     {
         NS_ERROR("broken protocol handler didn't escape double-quote.");
     }
 
     buffer.AppendLiteral("</head>\n<body>\n<h1>");
@@ -585,17 +588,21 @@ nsIndexedToHTML::OnStartRequest(nsIReque
 
     if (!parentStr.IsEmpty()) {
         nsXPIDLString parentText;
         rv = mBundle->GetStringFromName(NS_LITERAL_STRING("DirGoUp").get(),
                                         getter_Copies(parentText));
         if (NS_FAILED(rv)) return rv;
 
         buffer.AppendLiteral("<p id=\"UI_goUp\"><a class=\"up\" href=\"");
-        AppendASCIItoUTF16(parentStr, buffer);
+
+        NS_ConvertUTF8toUTF16 utf16ParentStr(parentStr);
+        nsString htmlParentStr;
+        htmlParentStr.Adopt(nsEscapeHTML2(utf16ParentStr.get(), utf16ParentStr.Length()));
+        buffer.Append(htmlParentStr);
         buffer.AppendLiteral("\">");
         AppendNonAsciiToNCR(parentText, buffer);
         buffer.AppendLiteral("</a></p>\n");
     }
 
     if (isSchemeFile) {
         nsXPIDLString showHiddenText;
         rv = mBundle->GetStringFromName(NS_LITERAL_STRING("ShowHidden").get(),
@@ -876,18 +883,20 @@ nsIndexedToHTML::OnIndexAvailable(nsIReq
         // escape as relative
         // esc_Directory is needed for protocols which allow the same name for
         // both a directory and a file and distinguish between the two by a
         // trailing '/' -- without it, the trailing '/' will be escaped, and
         // links from within that directory will be incorrect
         escFlags = esc_Forced | esc_OnlyASCII | esc_AlwaysCopy | esc_FileBaseName | esc_Colon | esc_Directory;
     }
     NS_EscapeURL(utf8UnEscapeSpec.get(), utf8UnEscapeSpec.Length(), escFlags, escapeBuf);
-
-    AppendUTF8toUTF16(escapeBuf, pushBuffer);
+    NS_ConvertUTF8toUTF16 utf16URI(escapeBuf);
+    nsString htmlEscapedURL;
+    htmlEscapedURL.Adopt(nsEscapeHTML2(utf16URI.get(), utf16URI.Length()));
+    pushBuffer.Append(htmlEscapedURL);
 
     pushBuffer.AppendLiteral("\">");
 
     if (type == nsIDirIndex::TYPE_FILE || type == nsIDirIndex::TYPE_UNKNOWN) {
         pushBuffer.AppendLiteral("<img src=\"moz-icon://");
         PRInt32 lastDot = escapeBuf.RFindChar('.');
         if (lastDot != kNotFound) {
             escapeBuf.Cut(0, lastDot);
