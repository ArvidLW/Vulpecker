--- mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp	19 Sep 2005 03:23:21 -0000	1.50
+++ mozilla/security/manager/boot/src/nsSecureBrowserUIImpl.cpp	19 Oct 2005 21:45:51 -0000
@@ -937,20 +937,23 @@
 void nsSecureBrowserUIImpl::ObtainEventSink(nsIChannel *channel)
 {
   if (!mToplevelEventSink)
     NS_QueryNotificationCallbacks(channel, mToplevelEventSink);
 }
 
 nsresult nsSecureBrowserUIImpl::UpdateSecurityState(nsIRequest* aRequest)
 {
   lockIconState newSecurityState;
 
+  PRBool showWarning = PR_FALSE;
+  lockIconState warnSecurityState;
+
   if (mNewToplevelSecurityState & STATE_IS_SECURE)
   {
     if (mNewToplevelSecurityState & STATE_SECURE_LOW
         ||
         mNewToplevelSecurityState & STATE_SECURE_MED)
     {
       if (mSubRequestsBrokenSecurity
           ||
           mSubRequestsNoSecurity)
       {
@@ -1030,64 +1033,46 @@
       security    icon
       ----------------
     
       no          open
       mixed       broken
       broken      broken
       low         low
       high        high
     */
 
-    PRBool showWarning = PR_TRUE;
+    showWarning = PR_TRUE;
     
     switch (mPreviousSecurityState)
     {
       case lis_no_security:
       case lis_broken_security:
         switch (newSecurityState)
         {
           case lis_no_security:
           case lis_broken_security:
             showWarning = PR_FALSE;
             break;
           
           default:
             break;
         }
       
       default:
         break;
     }
-    
+
     if (showWarning)
     {
-      switch (newSecurityState)
-      {
-        case lis_no_security:
-        case lis_broken_security:
-          ConfirmLeavingSecure();
-          break;
-
-        case lis_mixed_security:
-          ConfirmMixedMode();
-          break;
-
-        case lis_low_security:
-          ConfirmEnteringWeak();
-          break;
-
-        case lis_high_security:
-          ConfirmEnteringSecure();
-          break;
-      }
+      warnSecurityState = newSecurityState;
     }
-
+    
     mPreviousSecurityState = newSecurityState;
 
     if (lis_no_security == newSecurityState)
     {
       mSSLStatus = nsnull;
       mInfoTooltip.Truncate();
     }
   }
 
   if (mToplevelEventSink)
@@ -1126,20 +1111,43 @@
     mToplevelEventSink->OnSecurityChange(aRequest, newState);
   }
   else
   {
     PR_LOG(gSecureDocLog, PR_LOG_DEBUG,
            ("SecureUI:%p: UpdateSecurityState: NO mToplevelEventSink!\n", this
             ));
 
   }
 
+  if (showWarning)
+  {
+    switch (warnSecurityState)
+    {
+      case lis_no_security:
+      case lis_broken_security:
+        ConfirmLeavingSecure();
+        break;
+
+      case lis_mixed_security:
+        ConfirmMixedMode();
+        break;
+
+      case lis_low_security:
+        ConfirmEnteringWeak();
+        break;
+
+      case lis_high_security:
+        ConfirmEnteringSecure();
+        break;
+    }
+  }
+
   return NS_OK; 
 }
 
 NS_IMETHODIMP
 nsSecureBrowserUIImpl::OnLocationChange(nsIWebProgress* aWebProgress,
                                         nsIRequest* aRequest,
                                         nsIURI* aLocation)
 {
   if (aLocation)
   {
