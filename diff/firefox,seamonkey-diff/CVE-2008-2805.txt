--- content/base/public/nsContentUtils.h	1 Mar 2008 15:06:33 -0000	1.60.4.14
+++ content/base/public/nsContentUtils.h	5 May 2008 10:05:13 -0000
@@ -109,16 +109,22 @@ public:
                                                  nsIScriptGlobalObject *aNewScope);
 
   static PRBool   IsCallerChrome();
 
   static PRBool   IsCallerTrustedForRead();
 
   static PRBool   IsCallerTrustedForWrite();
 
+  /**
+   * Check whether a caller is trusted to have aCapability.  This also
+   * checks for UniversalXPConnect in addition to aCapability.
+   */
+  static PRBool   IsCallerTrustedForCapability(const char* aCapability);
+
   /*
    * Returns true if the nodes are both in the same document or
    * if neither is in a document.
    * Returns false if the nodes are not in the same document.
    */
   static PRBool   InSameDoc(nsIDOMNode *aNode,
                             nsIDOMNode *aOther);
 
@@ -634,16 +640,18 @@ public:
    */
   static nsresult RemoveJSGCRoot(jsval* aPtr) {
     return RemoveJSGCRoot((void*)aPtr);
   }
   static nsresult RemoveJSGCRoot(JSObject** aPtr) {
     return RemoveJSGCRoot((void*)aPtr);
   }
   static nsresult RemoveJSGCRoot(void* aPtr);
+
+  static PRBool IsNativeAnonymous(nsIContent* aContent);
   
 private:
   static nsresult doReparentContentWrapper(nsIContent *aChild,
                                            JSContext *cx,
                                            JSObject *aOldGlobal,
                                            JSObject *aNewGlobal);
 
   static nsresult EnsureStringBundle(PropertiesFile aFile);

--- content/base/src/nsContentUtils.cpp	1 Mar 2008 15:06:33 -0000	1.107.4.26
+++ content/base/src/nsContentUtils.cpp	5 May 2008 10:05:14 -0000
@@ -1082,17 +1082,18 @@ nsContentUtils::IsCallerChrome()
     if (NS_FAILED(rv)) {
       return PR_FALSE;
     }
   }
 
   return is_caller_chrome;
 }
 
-static PRBool IsCallerTrustedForCapability(const char* aCapability)
+PRBool
+nsContentUtils::IsCallerTrustedForCapability(const char* aCapability)
 {
   if (nsContentUtils::IsCallerChrome())
     return PR_TRUE;
 
   // The secman really should handle UniversalXPConnect case, since that
   // should include UniversalBrowserRead... doesn't right now, though.
   PRBool hasCap;
   nsIScriptSecurityManager* ssm = nsContentUtils::GetSecurityManager();
@@ -2617,8 +2618,25 @@ nsContentUtils::RemoveJSGCRoot(void* aPt
 
   if (--sScriptRootCount == 0) {
     NS_RELEASE(sJSRuntimeService);
     sScriptRuntime = nsnull;
   }
 
   return NS_OK;
 }
+/* static */
+PRBool
+nsContentUtils::IsNativeAnonymous(nsIContent* aContent)
+{
+  while (aContent) {
+    nsIContent* bindingParent = aContent->GetBindingParent();
+    if (bindingParent == aContent) {
+      return PR_TRUE;
+    }
+    if (aContent->IsContentOfType(nsIContent::eTEXT)) {
+      aContent = aContent->GetParent();
+    } else {
+      aContent = bindingParent;
+    }
+  }
+  return PR_FALSE;
+}

--- content/base/src/nsRange.cpp	30 Sep 2006 19:05:01 -0000	1.189.2.6
+++ content/base/src/nsRange.cpp	5 May 2008 10:05:14 -0000
@@ -1907,16 +1907,21 @@ nsresult nsRange::InsertNode(nsIDOMNode*
   nsresult res;
   PRInt32 tStartOffset;
   this->GetStartOffset(&tStartOffset);
 
   nsCOMPtr<nsIDOMNode> tStartContainer;
   res = this->GetStartContainer(getter_AddRefs(tStartContainer));
   if(NS_FAILED(res)) return res;
 
+  nsCOMPtr<nsIContent> startContent = do_QueryInterface(tStartContainer);
+  NS_ENSURE_TRUE(!nsContentUtils::IsNativeAnonymous(startContent) ||
+                 nsContentUtils::IsCallerTrustedForCapability("UniversalFileRead"),
+                 NS_ERROR_DOM_SECURITY_ERR);
+
   nsCOMPtr<nsIDOMText> startTextNode(do_QueryInterface(tStartContainer));
   if (startTextNode)
   {
     nsCOMPtr<nsIDOMNode> tSCParentNode;
     res = tStartContainer->GetParentNode(getter_AddRefs(tSCParentNode));
     if(NS_FAILED(res)) return res;
 
     nsCOMPtr<nsIDOMText> secondPart;
