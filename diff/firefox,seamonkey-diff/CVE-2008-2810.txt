--- toolkit/components/commandlines/src/nsCommandLine.cpp	31 Dec 2007 15:15:44 -0000	1.17
+++ toolkit/components/commandlines/src/nsCommandLine.cpp	15 Apr 2008 00:03:03 -0000
@@ -90,16 +90,17 @@
   typedef nsresult (*EnumerateHandlersCallback)(nsICommandLineHandler* aHandler,
 					nsICommandLine* aThis,
 					void *aClosure);
   typedef nsresult (*EnumerateValidatorsCallback)(nsICommandLineValidator* aValidator,
 					nsICommandLine* aThis,
 					void *aClosure);
 
   void appendArg(const char* arg);
+  void resolveShortcutURL(nsILocalFile* aFile, nsACString& outURL);
   nsresult EnumerateHandlers(EnumerateHandlersCallback aCallback, void *aClosure);
   nsresult EnumerateValidators(EnumerateValidatorsCallback aCallback, void *aClosure);
 
   nsStringArray     mArgs;
   PRUint32          mState;
   nsCOMPtr<nsIFile> mWorkingDir;
   nsCOMPtr<nsIDOMWindow> mWindowContext;
   PRBool            mPreventDefault;
@@ -437,26 +438,36 @@
   nsresult rv;
 
   // First, we try to init the argument as an absolute file path. If this doesn't
   // work, it is an absolute or relative URI.
 
   nsCOMPtr<nsIIOService> io = do_GetIOService();
   NS_ENSURE_TRUE(io, NS_ERROR_OUT_OF_MEMORY);
 
+  nsCOMPtr<nsIURI> workingDirURI;
+  if (mWorkingDir) {
+    io->NewFileURI(mWorkingDir, getter_AddRefs(workingDirURI));
+  }
+
   nsCOMPtr<nsILocalFile> lf (do_CreateInstance(NS_LOCAL_FILE_CONTRACTID));
   rv = lf->InitWithPath(aArgument);
   if (NS_SUCCEEDED(rv)) {
     lf->Normalize();
-    return io->NewFileURI(lf, aResult);
-  }
+    nsCAutoString url;
+	// Try to resolve the url for .url files.
+	resolveShortcutURL(lf, url);
+    if (!url.IsEmpty()) {
+      return io->NewURI(url,
+                        nsnull,
+                        workingDirURI,
+                        aResult);
+    }
 
-  nsCOMPtr<nsIURI> workingDirURI;
-  if (mWorkingDir) {
-    io->NewFileURI(mWorkingDir, getter_AddRefs(workingDirURI));
+    return io->NewFileURI(lf, aResult);
   }
 
   return io->NewURI(NS_ConvertUTF16toUTF8(aArgument),
                     nsnull,
                     workingDirURI,
                     aResult);
 }
 
@@ -472,16 +483,32 @@
   CopyUTF8toUTF16(nsDependentCString(arg), warg);
 #else
   NS_CopyNativeToUnicode(nsDependentCString(arg), warg);
 #endif
 
   mArgs.AppendString(warg);
 }
 
+void
+nsCommandLine::resolveShortcutURL(nsILocalFile* aFile, nsACString& outURL)
+{
+  nsCOMPtr<nsIFileProtocolHandler> fph;
+  nsresult rv = NS_GetFileProtocolHandler(getter_AddRefs(fph));
+  if (NS_FAILED(rv))
+    return;
+
+  nsCOMPtr<nsIURI> uri;
+  rv = fph->ReadURLFile(aFile, getter_AddRefs(uri));
+  if (NS_FAILED(rv))
+    return;
+
+  uri->GetSpec(outURL);
+}
+
 NS_IMETHODIMP
 nsCommandLine::Init(PRInt32 argc, char** argv, nsIFile* aWorkingDir,
                     PRUint32 aState)
 {
   NS_ENSURE_ARG_MIN(aState, 0);
   NS_ENSURE_ARG_MAX(aState, 2);
 
   PRInt32 i;
