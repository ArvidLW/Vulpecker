--- js/src/xpconnect/src/xpcwrappednative.cpp	16 Nov 2005 02:12:21 -0000	1.104
+++ js/src/xpconnect/src/xpcwrappednative.cpp	14 Dec 2005 02:27:29 -0000
@@ -267,38 +267,42 @@ XPCWrappedNative::GetNewOrUsed(XPCCallCo
     // There is a chance that the object wants to have the self-same JSObject
     // reflection regardless of the scope into which we are reflecting it.
     // Many DOM objects require this. The scriptable helper specifies this
     // in preCreate by indicating a 'parent' of a particular scope.
     //
     // To handle this we need to get the scriptable helper early and ask it.
     // It is possible that we will then end up forwarding this entire call
     // to this same function but with a different scope.
 
-    nsCOMPtr<nsIClassInfo> info(do_QueryInterface(identity));
+    // If we are making a wrapper for the nsIClassInfo interface then
+    // We *don't* want to have it use the prototype meant for instances
+    // of that class.
+    JSBool isClassInfo = Interface->GetIID()->Equals(NS_GET_IID(nsIClassInfo));
+
+    nsCOMPtr<nsIClassInfo> info;
+
+    if(!isClassInfo)
+        info = do_QueryInterface(identity);
+
 #ifdef XPC_IDISPATCH_SUPPORT
     // If this is an IDispatch wrapper and it didn't give us a class info
     // we'll provide a default one
     if(isIDispatch && !info)
     {
-        info = already_AddRefed<nsIClassInfo>(XPCIDispatchClassInfo::GetSingleton());
+        info = dont_AddRef(XPCIDispatchClassInfo::GetSingleton());
     }
 #endif
 
-    // If we are making a wrapper for the nsIClassInfo interface then
-    // We *don't* want to have it use the prototype meant for instances
-    // of that class.
-    JSBool isClassInfo = Interface->GetIID()->Equals(NS_GET_IID(nsIClassInfo));
-
     XPCNativeScriptableCreateInfo sciProto;
     XPCNativeScriptableCreateInfo sciWrapper;
 
-    if(NS_FAILED(GatherScriptableCreateInfo(identity,
-                                            isClassInfo ? nsnull : info.get(),
+    if(!isClassInfo &&
+       NS_FAILED(GatherScriptableCreateInfo(identity, info.get(),
                                             &sciProto, &sciWrapper)))
         return NS_ERROR_FAILURE;
 
     JSObject* parent = Scope->GetGlobalJSObject();
 
     jsval newParentVal = JSVAL_NULL;
     XPCMarkableJSVal newParentVal_markable(&newParentVal);
     AutoMarkingJSVal newParentVal_automarker(ccx, &newParentVal_markable);
 
