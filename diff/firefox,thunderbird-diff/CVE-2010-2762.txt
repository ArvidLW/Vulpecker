diff --git a/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp b/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
--- a/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
+++ b/js/src/xpconnect/src/XPCSafeJSObjectWrapper.cpp
@@ -415,23 +415,31 @@ DummyNative(JSContext *cx, JSObject *obj
 static JSObject *
 GetScopeFunction(JSContext *cx, JSObject *outerObj)
 {
   jsval v;
   if (!JS_GetReservedSlot(cx, outerObj, sScopeFunSlot, &v)) {
     return nsnull;
   }
 
-  if (JSVAL_IS_OBJECT(v)) {
-    return JSVAL_TO_OBJECT(v);
+  JSObject *unsafeObj = GetUnsafeObject(cx, outerObj);
+  JSObject *scopeobj = JS_GetGlobalForObject(cx, unsafeObj);
+  OBJ_TO_INNER_OBJECT(cx, scopeobj);
+  if (!scopeobj) {
+    return nsnull;
   }
 
-  JSObject *unsafeObj = GetUnsafeObject(cx, outerObj);
-  JSFunction *fun = JS_NewFunction(cx, DummyNative, 0, 0,
-                                   JS_GetGlobalForObject(cx, unsafeObj),
+  if (JSVAL_IS_OBJECT(v)) {
+    JSObject *funobj = JSVAL_TO_OBJECT(v);
+    if (JS_GetGlobalForObject(cx, funobj) == scopeobj) {
+      return funobj;
+    }
+  }
+
+  JSFunction *fun = JS_NewFunction(cx, DummyNative, 0, 0, scopeobj,
                                    "SJOWContentBoundary");
   if (!fun) {
     return nsnull;
   }
 
   JSObject *funobj = JS_GetFunctionObject(fun);
   if (!JS_SetReservedSlot(cx, outerObj, sScopeFunSlot, OBJECT_TO_JSVAL(funobj))) {
     return nsnull;
