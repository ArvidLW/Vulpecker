--- content/xbl/src/nsXBLBinding.cpp	1 Sep 2004 22:16:34 -0000	1.176.2.1
+++ content/xbl/src/nsXBLBinding.cpp	3 Jun 2005 02:08:34 -0000
@@ -97,16 +97,19 @@
 
 #include "nsIDOMAttr.h"
 #include "nsIDOMNamedNodeMap.h"
 
 #include "nsXBLPrototypeHandler.h"
 
 #include "nsXBLPrototypeBinding.h"
 #include "nsXBLBinding.h"
+#include "nsContentUtils.h"
+#include "nsIPrincipal.h"
+#include "nsIScriptSecurityManager.h"
 
 #include "prprf.h"
 
 // Helper classes
 
 /***********************************************************************/
 //
 // The JS class for XBLBinding
@@ -1347,17 +1350,55 @@ nsXBLBinding::GetTextData(nsIContent *aP
   return NS_OK;
 }
 
 PRBool
 nsXBLBinding::AllowScripts()
 {
   PRBool result;
   mPrototypeBinding->GetAllowScripts(&result);
-  return result;
+  if (!result) {
+    return result;
+  }
+
+  // Nasty hack.  Use the JSContext of the bound node, since the
+  // security manager API expects to get the docshell type from
+  // that.  But use the nsIPrincipal of our document.
+  nsIScriptSecurityManager* mgr = nsContentUtils::GetSecurityManager();
+  if (!mgr) {
+    return PR_FALSE;
+  }
+  
+  nsIDocument* doc = mBoundElement->GetDocument();
+  if (!doc) {
+    return PR_FALSE;
+  }
+
+  nsIScriptGlobalObject* global = doc->GetScriptGlobalObject();
+  if (!global) {
+    return PR_FALSE;
+  }
+
+  nsCOMPtr<nsIScriptContext> context = global->GetContext();
+  if (!context) {
+    return PR_FALSE;
+  }
+  
+  JSContext* cx = (JSContext*) context->GetNativeContext();
+
+  nsCOMPtr<nsIDocument> ourDocument;
+  mPrototypeBinding->XBLDocumentInfo()->GetDocument(getter_AddRefs(ourDocument));
+  nsIPrincipal* principal = ourDocument->GetPrincipal();
+  if (!principal) {
+    return PR_FALSE;
+  }
+
+  PRBool canExecute;
+  nsresult rv = mgr->CanExecuteScripts(cx, principal, &canExecute);
+  return NS_SUCCEEDED(rv) && canExecute;
 }
 
 PR_STATIC_CALLBACK(PRBool)
 DeleteVoidArray(nsHashKey* aKey, void* aData, void* aClosure)
 {
   delete NS_STATIC_CAST(nsVoidArray*, aData);
   return PR_TRUE;
 }