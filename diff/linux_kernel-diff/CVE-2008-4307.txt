diff --git a/fs/nfs/file.c b/fs/nfs/file.c
index
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@ -476,22 +476,20 @@ static int do_setlk(struct file *filp, i
 
 	lock_kernel();
 	/* Use local locking if mounted with "-onolock" */
-	if (!(NFS_SERVER(inode)->flags & NFS_MOUNT_NONLM)) {
+	if (!(NFS_SERVER(inode)->flags & NFS_MOUNT_NONLM))
 		status = NFS_PROTO(inode)->lock(filp, cmd, fl);
-		/* If we were signalled we still need to ensure that
-		 * we clean up any state on the server. We therefore
-		 * record the lock call as having succeeded in order to
-		 * ensure that locks_remove_posix() cleans it out when
-		 * the process exits.
-		 */
-		if (status == -EINTR || status == -ERESTARTSYS)
-			posix_lock_file_wait(filp, fl);
-	} else 
+	else {
 		status = posix_lock_file_wait(filp, fl);
+		if (status < 0)
+			printk(KERN_WARNING
+				"%s: VFS is out of sync with lock manager!\n",
+				__FUNCTION__);
+	}
 
 	unlock_kernel();
 	if (status < 0)
 		return status;
+
 	/*
 	 * Make sure we clear the cache whenever we try to get the lock.
 	 * This makes locking act as a cache coherency point.